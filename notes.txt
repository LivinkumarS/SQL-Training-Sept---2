Database:
------------
>> An organised collection of data that can be easily accessed, modified and managed.

RDBMS ---> Relational DataBase Management System. (SQLDB)
--------------------------------------------------
>> A software system that manages database in tabular (row-column) format
>> Ex: MySQL, PostgreSQL....
>> Uses Language called SQL.

NRDBMS -> Non Relational DataBase Management System.(NoSQLDB)
-----------------------------------------------------
>> A software system that manages database in Document (row-column) format
>> Ex: MongoDb, MariaDB....

MySQL 
------
>> RDBMS 
>> Open Source.

SQL ---> Structured Query Language
-----------------------------------
>> SQL keywords are not case-sensitive.
>> Every SQL query should end with ";"

DataBase  --> Multiple Tables --> Data
(Schema)

DataTypes
---------
Numeric DataTypes 
-------------------
INT ---> Whole Numbers
FLOAT ---> Decimal Numbers 
DOUBLE --> Large Decimal Numbers 

String DataTypes
-----------------
CHAR(n) --> Fixed Length Characters. EX: CHAR(5)-->"hello","world"...
VARCHAR(n) ---> Variable Char Length. EX: VARCHAR(5) --> 'h','hi','can','four',"hello"
TEXT --> Large text.

Boolean Datatypes 
-----------------
BOOL --> 1 or 0

Date and Time
--------------
DATE --> only date as a String --> 'yyyy-mm-dd'. Ex: '2025-09-22'
TIME --> only time as a String --> 'HH:MM:SS'. Ex: '12:12:12'
DATETIME ---> Both date and time

Constraints 
-----------
>> A Constraint is a rule applied to a column in a table. It ensures data integrity.

PRIMARY KEY ---> can be used only once in a table. this is used to identify each rows uniquely. data that are being stored in that column should be unique. you cannot leave this primary key column empty.
AUTO_INCREMENT --> Automatically generates a unique numeric value.
UNIQUE ---> It ensures no duplicate value in a column.
NOT NULL ---> Ensures that a column cannot have NULL value.
DEFAULT ---> Provides a default value when no value is supplied.

Foreign Key --> It creates relationship between two tables. It refers to primary key of another table.

Operators 
----------
basic Operators 
----------------
= ---> will check the equality.
<>,!= --> not equal. 
< --> lesser than.
> ---> Greater than.
<= --> lesser than or equal.
>= --> greater than or equal.

BETWEEN
---------
>> Checks if a value is within a range (inclusive).

where colName BETWEEN num1 AND num2;

IN 
---
>> Checks if a value matches any value in a list.

where colName in (val1,val2......);

LIKE --> pattern matching
-----
Used for searching using a pattern.

>> % --> matches any number of characters(0 to infinite)
>> _ --> matches exactly one character.

starting with 'v'  --> 'v%' 
ends with 'v'  ---> '%v'

where colName like 'pattern';

Logical Operators 
------------------
>> combine multiple conditions 

AND ---> all conditions must be true.
OR ---> at least one condition must be true.
NOT --> invert a condition.

Sorting (Arranging)
------- 
ORDER BY
ORDER BY colName (ASC or DESC);

LIMIT
------
>> Restrict the number of rows returned
ex: limit noOfRows;

OFFSET 
------
>> Skip the roes at the begenning.
ex: limit 10 offset 5 ;


Queries:
----------

To Create Database ----> CREATE DATABASE dbname;
To Select Database ---> USE dbname;
To Create a New Table --> CREATE TABLE tbName(
    col1 DataType Constraints,
    col2 DataType Constraints,
    col3 DataType Constraints,
    .
    .
    .
);

To insert a new data in a table ---> INSERT INTO tbname (col Details(optional)) VALUES (),(),()...;
To retrive data from a table ---> SELECT col1,col2 FROM tbname; when you want to retrive every col without changing order---> *

To update an existing data --> UPDATE tbname SET col1=val1, col2=val2.......;
sql_safe _updates ---> when it is on ---> cannot update or delete more than 1 data. filteration is must. condition should depend on primary.

To delete an existing data --> DELETE FROM tbname  filteration;


CRUD   --> Create Read Update Delete 
----
Create --> Insert into
Read --> Select
Update --> Update
Delete ---> Delete

Filtering ---> WHERE
---------------------
>> Selecting only the rows that meet certain condition. 
Operators ---> create conditions ---> filter the results.

to use filteration ---> query.... WHERE condition;


Functions
----------
>> Functions are predefined programs in MySQL that take an input, performs an operation with it and return a output.

Numerical Functions 
-------------------
ROUND(dec num) --> Round off to the nearest integer. Ex: round(45.55) --> 46
CEIL(dec number) --> Round off to the next integer. Ex: ceil(22.22) --> 23 
FLOOR(dec number) --> Round off to the previous integer. Ex: floor(33.99) --> 33
MOD(num1,num2) --> gives reminder. Ex: mod(9,3) --> 0
POWER(num1,num2) --> num1 power num2. Ex: power(4,2) --> 16

String Functions 
--------------------
CONCAT(s1,s2,s3....) --> attach strings
LENGTH(str) --> return length of that string. "hello world"--> 11
UPPER(str) --> convert to uppercase. ex: upper("hello") --> "HELLO"
LOWER(str) --> convert to lowercase. ex: lower("HELLO") --> "hello"
SUBSTRING(str, str, length) --> extract a part of a string. Ex: SUBSTRING("Hello world",1,5) ---> Hello
REPLACE(str, sub1, sub2) --> replacing a substring. Ex: REPLACE("hello world", 'hello', 'hi')--> 'hi world'

Date and Time Functions 
------------------------
NOW() --> current date and time.
CURDATE()--> current date
CURTIME()--> current time
DATEDIFF(d1,d2) --> defference in days. DATEDIFF('2025-09-25','2025-09-20') --> 5


Joins 
--------
>> A JOIN in SQL is used to combine rows from two different tables.
Types
-------
>> INNER 
>> LEFT 
>> RIGHT 
>> CROSS

INNER JOIN 
------------
>> Only matching rows from both tables will be shown.
Ex: SELECT colDetails FROM tab1 INNER JOIN tab2 ON tab1.primaryKey=tab2.ForeignKey; 

LEFT JOIN 
-----------
>> It retrives each and every rows from left table.
Ex: SELECT colDetails FROM tab1 LEFT JOIN tab2 ON tab1.primaryKey=tab2.ForeignKey;

RIGHT JOIN 
-----------
>> It retrives each and every rows from left table.
Ex: SELECT colDetails FROM tab1 RIGHT JOIN tab2 ON tab1.primaryKey=tab2.ForeignKey;

CROSS JOIN
-----------
>> It returns all possible combinations of rows between two tables.
EX: select * from tab1 cross join tab2;

red green blue
m l xl xxl

no of rows in result = rows in left table * rows in right table


Aggregate Fuctions 
--------------------
>> It works on a set of values and return a single value.

1) COUNT() ---> counts the number of rows.
2) SUM()  --> adds numeric values
3) AVG()  --> finds average.
4) MIN()  --> minimum value.
5) MAX()  --> maximum value.

Grouping  ---> GROUP BY 
----------  
>> Groups rows that have the same values into summary rows.

>> ...... GROUP BY colName;

to do filteration with rows ---> WHERE.
to do filteration with Groups ---> HAVING.

HAVING ---> .... HAVING condition;
